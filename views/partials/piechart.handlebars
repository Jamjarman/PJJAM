<style>
 #chartplay {
     height: 360px;
     margin: 0 auto;                            
     position: relative;
     width: 360px;
 }
 #chartwin {
     height: 360px;
     margin: 0 auto;                           
     position: relative;
     width: 360px;
 }
 #chartgame {
     height: 720px;
     margin: 0 auto;                           
     position: relative;
     width: 720px;
 }
 #chartgamegen {
     height: 720px;
     margin: 0 auto;                           
     position: relative;
     width: 720px;
 }
 .tooltip {
     background: #eee;
     box-shadow: 0 0 5px #999999;
     color: #333;
     display: none;
     font-size: 12px;
     left: 130px;
     padding: 10px;
     position: absolute;
     text-align: center;
     top: 95px;
     width: 80px;
     z-index: 10;
 }
 .legend {
     font-size: 12px;
 }
 rect {
     stroke-width: 2;
 }
 
</style>

<script>
 function pieChart(d3, file, divid, width, height){
     'use strict';

     
     var radius = Math.min(width, height) / 2;
     var donutWidth = 75;
     var legendRectSize = 18;
     var legendSpacing = 4;

     var color = d3.scale.category20b();

     var svg = d3.select(divid)
		 .append('svg')
		 .attr('width', width)
		 .attr('height', height)
		 .append('g')
		 .attr('transform', 'translate(' + (width / 2) + 
				    ',' + (height / 2) + ')');

     var arc = d3.svg.arc()
		 .innerRadius(radius - donutWidth)
		 .outerRadius(radius);

     var pie = d3.layout.pie()
		 .value(function(d) { return d.count; })
		 .sort(null);
     var tooltip=d3.select(divid)
		   .append('div')
		   .attr('class', 'tooltip');
     tooltip.append('div')
	    .attr('class', 'player');
     tooltip.append('div')
	    .attr('class', 'count');
     tooltip.append('div')
	    .attr('class', 'percent');
     
	 

     d3.csv(file, function(error, dataset) {           
         dataset.forEach(function(d) {
             d.count = +d.count;
	 });                                                       

         var path = svg.selectAll('path')
		       .data(pie(dataset))
		       .enter()
		       .append('path')
		       .attr('d', arc)
		       .attr('fill', function(d, i) { 
			   return color(d.data.player);
		       });

	 path.on('mouseover', function(d){
	     var total=d3.sum(dataset.map(function(d){
		 return d.count;
	     }));
	     var percent=Math.round(1000*d.data.count/total)/10;
	     tooltip.select('.player').html(d.data.player);
	     tooltip.select('.count').html(d.data.count);
	     tooltip.select('.percent').html(percent+'%');
	     tooltip.style('display', 'block');
	 });

	 path.on('mouseout', function(d){
	     tooltip.style('display', 'none');
	 });
	 
         var legend = svg.selectAll('.legend')
			 .data(color.domain())
			 .enter()
			 .append('g')
			 .attr('class', 'legend')
			 .attr('transform', function(d, i) {
			     var height = legendRectSize + legendSpacing;
			     var offset =  height * color.domain().length / 2;
			     var horz = -2 * legendRectSize;
			     var vert = i * height - offset;
			     return 'translate(' + horz + ',' + vert + ')';
			 });

         legend.append('rect')
               .attr('width', legendRectSize)
               .attr('height', legendRectSize)
               .style('fill', color)
               .style('stroke', color);
         
         legend.append('text')
               .attr('x', legendRectSize + legendSpacing)
               .attr('y', legendRectSize - legendSpacing)
               .text(function(d) { return d; });                       

     });                                                         // NEW
     
 };
 
</script>
